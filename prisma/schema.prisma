// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url  = env("DATABASE_URL")
}

model Challenge {
    id          String   @id @default(cuid())
    name        String
    description String
    image       String
    createdAt   DateTime @default(now())
    day         DateTime

    challengesSolutions ChallengeSolution[]
    languages           Language[]

    @@index([name])
}

model ChallengeSolution {
    id          String      @id @default(cuid())
    userId      String 
    challengeId String
    groupeId    String      @unique

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    challenge   Challenge   @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    group       CodeGroup   @relation(fields: [groupeId], references: [id], onDelete: Cascade) 
}

model Code {
    id          String @id @default(cuid())
    body        String
    languageId  String
    groupeId    String?

    language    Language    @relation(fields: [languageId], references: [id], onDelete: Cascade) 
    group       CodeGroup?    @relation(fields: [groupeId], references: [id], onDelete: Cascade)    
}

model Language {
    id          String @id @default(cuid())
    name        String
    challengeId String?

    codes       Code[]

    challenge   Challenge?    @relation(fields: [challengeId], references: [id], onDelete: Cascade)   
}

model CodeGroup {
    id                  String @id @default(cuid())

    codes    Code[]
    challengeSolution   ChallengeSolution?    
} 

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    challengesSolutions ChallengeSolution[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
